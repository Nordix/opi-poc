/*-
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2023 Nordix Foundation.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

syntax = "proto3";

package L2XPUInfraManager;

option go_package="./L2XPUInfraManager";

import "google/protobuf/empty.proto";

/* ------------------------------------------------------------------------ */

service LogicalBridgeService {
    // Management of LogicalBridge Resources
    rpc CreateLB(LogicalBridgeInfo) returns (CreateLBResult);
    rpc ListLB(google.protobuf.Empty) returns (ListLBResult);
    rpc GetLB(LogicalBridgeId) returns (GetLBResult);
    rpc DeleteLB(LogicalBridgeId) returns (DeleteLBResult);
}

message LogicalBridgeId {
    uint32 vlan_id = 1;
}

message LogicalBridgeInfo {
    string name = 1;            // Optional: Free text description
    uint32 vlan_id = 2;         // Key
    uint32 vni = 3;             // Optional: VXLAN VNI for L2 EVPN. Also used as EVPN route target
}

message CreateLBResult {
    enum ErrorCode {
        OK = 0;
        INVALID_VLAN_ID = 1;
        VLAN_ID_EXISTS = 2;
        CONFIGURATION_ERROR = 3;
        INVALID_VNI = 4;
        VNI_EXISTS = 5;
    }
    ErrorCode error_code = 1;
    string details = 2;
}

message ListLBResult {
    repeated LogicalBridgeInfo logical_bridges = 1;
}

message GetLBResult {
    enum ErrorCode {
        OK = 0;
        INVALID_VLAN_ID = 1;
        VLAN_ID_NOT_FOUND = 2;
    }
    ErrorCode error_code = 1;
    string details = 2;
    LogicalBridgeInfo logical_bridge = 3;
}

message DeleteLBResult {
    enum ErrorCode {
        OK = 0;
        INVALID_VLAN_ID = 1;
        VLAN_ID_NOT_FOUND = 2;
        PORTS_EXIST_ON_BRIDGE = 3;
        CONFIGURATION_ERROR = 4;
    }
    ErrorCode error_code = 1;
    string details = 2;
}

/* ------------------------------------------------------------------------ */

service BridgePortService {
    // Management of BridgePort resources
    rpc CreateBP(BridgePortInfo) returns (CreateBPResult);
    rpc ListBP(google.protobuf.Empty) returns (ListBPResult);
    rpc GetBP(BridgePortId) returns (GetBPResult);
    rpc DeleteBP(BridgePortId) returns (DeleteBPResult);
}

message BridgePortId {
    uint32 vport_id = 1;
}

message BridgePortInfo {
    string name = 1;            // Optional: Free text description
    uint32 vport_id = 2;        // Key. Read-only. Assigned by the server in CreateBP
    string mac_address = 3;     // Use "aa:bb:cc:dd:ee:ff" format
    enum BridgePortType {
        UNKNOWN = 0;
        ACCESS = 1;
        TRUNK = 2;
    }
    BridgePortType ptype = 4;
    repeated uint32 vlan_id = 5;
}

message CreateBPResult {
    enum ErrorCode {
        OK = 0;
        PORT_EXISTS = 1;
        INVALID_VLAN_ID = 2;
        VLAN_ID_NOT_FOUND = 3;
        INVALID_MAC_ADDRESS = 4;
        INVALID_PORT_TYPE = 5;
        INVALID_VPORT_ID = 6;
        HW_OFFLOAD_ERROR = 7;
        CONFIGURATION_ERROR = 8;

    }
    ErrorCode error_code = 1;
    string details = 2;
    BridgePortInfo bridge_port = 3;
}

message ListBPResult {
    repeated BridgePortInfo bridge_port = 1;
}

message GetBPResult {
    enum ErrorCode {
        OK = 0;
        PORT_NOT_FOUND = 1;
    }
    ErrorCode error_code = 1;
    string details = 2;
    BridgePortInfo bridge_port = 3;
}

message DeleteBPResult {
    enum ErrorCode {
        OK = 0;
        PORT_NOT_FOUND = 1;
        HW_OFFLOAD_ERROR = 2;
        CONFIGURATION_ERROR = 3;
    }
    ErrorCode error_code = 1;
    string details = 2;
}